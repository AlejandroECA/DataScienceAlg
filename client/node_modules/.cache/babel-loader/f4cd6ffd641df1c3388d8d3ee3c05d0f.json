{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alejandrocarrillo/Documents/Projects/DataScienceDepaul/datascience/src/components/Shop/shopList/shopList.component.js\";\nimport React from 'react';\nimport DefaulTitle from '../../title/title.component';\nimport { Route, withRouter } from 'react-router-dom';\nimport CollectionsOverview from '../collections-overview/collections-overview.componenct';\nimport CollectionPage from '../shop.components/collection/collection.component';\nimport { firestore, convertCollectionsSnapshotsToMap } from '../../../firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../../redux/shop/shop.actions';\nimport WithSpinner from '../../with-spinner/with-spinner.component';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst ColletionPageWithSpinner = WithSpinner(CollectionPage);\n_c2 = ColletionPageWithSpinner;\n\nclass ShopList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.unsubscribeFromSnapshot = null;\n    this.state = {\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotsToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(DefaulTitle, {\n        title: 'SHOP List'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.path}`,\n          render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n            isLoading: loading,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 75\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${match.path}/:collectionId`,\n          render: props => /*#__PURE__*/_jsxDEV(ColletionPageWithSpinner, {\n            isLoading: loading,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 84\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(withRouter(ShopList));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"ColletionPageWithSpinner\");","map":{"version":3,"sources":["/Users/alejandrocarrillo/Documents/Projects/DataScienceDepaul/datascience/src/components/Shop/shopList/shopList.component.js"],"names":["React","DefaulTitle","Route","withRouter","CollectionsOverview","CollectionPage","firestore","convertCollectionsSnapshotsToMap","connect","updateCollections","WithSpinner","CollectionsOverviewWithSpinner","ColletionPageWithSpinner","ShopList","Component","constructor","props","unsubscribeFromSnapshot","state","loading","componentDidMount","collectionRef","collection","onSnapshot","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,SAASC,KAAT,EAAiBC,UAAjB,QAAkC,kBAAlC;AAEA,OAAOC,mBAAP,MAAgC,yDAAhC;AAEA,OAAOC,cAAP,MAA2B,oDAA3B;AAEA,SAAQC,SAAR,EAAmBC,gCAAnB,QAA0D,kCAA1D;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,kCAAhC;AAEA,OAAOC,WAAP,MAAwB,2CAAxB;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACN,mBAAD,CAAlD;KAAMO,8B;AACN,MAAMC,wBAAwB,GAAGF,WAAW,CAACL,cAAD,CAA5C;MAAMO,wB;;AAGN,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AADc,SAOlBC,uBAPkB,GAOQ,IAPR;AAEd,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAIDC,EAAAA,iBAAiB,GAAE;AAEf,UAAM;AAACX,MAAAA;AAAD,QAAsB,KAAKO,KAAjC;AAEA,UAAMK,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB;AAIA,SAAKL,uBAAL,GAA+BI,aAAa,CAACE,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACtE,YAAMC,cAAc,GAAGlB,gCAAgC,CAACiB,QAAD,CAAvD;AACAf,MAAAA,iBAAiB,CAACgB,cAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH,KAJ8B,CAA/B;AAMH;;AAEDQ,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKZ,KAArB;AACA,UAAM;AAACG,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AACA,wBACI;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAG,GAAEU,KAAK,CAACC,IAAK,EAAjC;AAAoC,UAAA,MAAM,EAAGb,KAAD,iBAAU,QAAC,8BAAD;AAAgC,YAAA,SAAS,EAAEG,OAA3C;AAAA,eAAwDH;AAAxD;AAAA;AAAA;AAAA;AAAA;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,gBAA3B;AAA4C,UAAA,MAAM,EAAGb,KAAD,iBAAW,QAAC,wBAAD;AAA0B,YAAA,SAAS,EAAEG,OAArC;AAAA,eAAkDH;AAAlD;AAAA;AAAA;AAAA;AAAA;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAvCiC;;AA0CtC,MAAMc,kBAAkB,GAAGC,QAAQ,KAAI;AACnCtB,EAAAA,iBAAiB,EAAEgB,cAAc,IAAIM,QAAQ,CAACtB,iBAAiB,CAACgB,cAAD,CAAlB;AADV,CAAJ,CAAnC;;AAIA,eAAejB,OAAO,CAAC,IAAD,EAAOsB,kBAAP,CAAP,CAAkC3B,UAAU,CAACU,QAAD,CAA5C,CAAf","sourcesContent":["import React from 'react';\n\nimport DefaulTitle from '../../title/title.component'\n\nimport { Route , withRouter} from 'react-router-dom';\n\nimport CollectionsOverview from '../collections-overview/collections-overview.componenct'\n\nimport CollectionPage from '../shop.components/collection/collection.component'\n\nimport {firestore, convertCollectionsSnapshotsToMap} from '../../../firebase/firebase.utils'\n\nimport {connect} from 'react-redux'\nimport {updateCollections} from '../../../redux/shop/shop.actions'\n\nimport WithSpinner from '../../with-spinner/with-spinner.component'\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst ColletionPageWithSpinner = WithSpinner(CollectionPage)\n\n\nclass ShopList extends React.Component{\n\n    constructor(props){ \n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n\n    unsubscribeFromSnapshot = null;\n\n    componentDidMount(){\n\n        const {updateCollections} = this.props\n\n        const collectionRef = firestore.collection('collections');\n\n        \n\n        this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n            const collectionsMap = convertCollectionsSnapshotsToMap(snapshot);\n            updateCollections(collectionsMap);\n            this.setState({loading: false});\n        }\n            )\n    }\n\n    render(){\n        const {match} = this.props\n        const {loading} = this.state\n        return(\n            <div>\n                <DefaulTitle title={'SHOP List'} />\n                <div>\n                    <Route exact path={`${match.path}`} render={(props)=> <CollectionsOverviewWithSpinner isLoading={loading} {...props}/> } />\n                    <Route path={`${match.path}/:collectionId`} render={(props) => <ColletionPageWithSpinner isLoading={loading} {...props} /> } />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch =>({\n    updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(withRouter(ShopList))"]},"metadata":{},"sourceType":"module"}