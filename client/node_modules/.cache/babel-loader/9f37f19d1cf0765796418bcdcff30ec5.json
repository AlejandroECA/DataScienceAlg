{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alejandrocarrillo/Documents/Projects/DataScienceDepaul/datascience/src/components/card-list/ListOfCards.component.js\";\nimport React from 'react';\nimport './ListOfCards.style.css';\nimport { CardIndividual } from '../card/CardIndividual.component';\nimport { Container, Col, Row } from 'reactstrap';\nimport { SearchBox } from '../searchBox/searchBox.component';\n\nclass ListOfCards extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      try {\n        const getDataB = await fetch('http://localhost:3000/algorithms');\n        const dataToJ = await getDataB.json();\n        this.setState({\n          algorithmList: dataToJ\n        }, console.log(dataToJ));\n      } catch (err) {\n        console.log('not possible now');\n      }\n    };\n\n    this.checkAndFind = e => {\n      this.setState({\n        searchField: e.target.value\n      }, () => console.log(this.state));\n    };\n\n    this.state = {\n      algorithmList: [],\n      searchField: ''\n    };\n  } // async way \n\n\n  render() {\n    const {\n      algorithmList,\n      searchField\n    } = this.state;\n    const fiterAlg = algorithmList.filter(alg => alg.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: \"12\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"ml-auto mr-auto\",\n              children: \"Algorithm List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"12\",\n            children: /*#__PURE__*/_jsxDEV(SearchBox, {\n              handleChange: this.checkAndFind,\n              placeholder: 'Search Algorithms'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: fiterAlg.map(x => /*#__PURE__*/_jsxDEV(Col, {\n            xs: \"6\",\n            sm: \"4\",\n            className: \"card-list\",\n            children: /*#__PURE__*/_jsxDEV(CardIndividual, {\n              index: x.id,\n              x: x\n            }, x.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ListOfCards;","map":{"version":3,"sources":["/Users/alejandrocarrillo/Documents/Projects/DataScienceDepaul/datascience/src/components/card-list/ListOfCards.component.js"],"names":["React","CardIndividual","Container","Col","Row","SearchBox","ListOfCards","Component","constructor","componentDidMount","getDataB","fetch","dataToJ","json","setState","algorithmList","console","log","err","checkAndFind","e","searchField","target","value","state","render","fiterAlg","filter","alg","name","toLowerCase","includes","toLocaleLowerCase","map","x","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,GAAtB,QAAgC,YAAhC;AACA,SAAQC,SAAR,QAAwB,kCAAxB;;AAGA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,GAAE;AACT;;AADS,SAUbC,iBAVa,GAUO,YAAW;AAC3B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,CAA5B;AACA,cAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,aAAKC,QAAL,CAAc;AAACC,UAAAA,aAAa,EAAEH;AAAhB,SAAd,EAAuCI,OAAO,CAACC,GAAR,CAAYL,OAAZ,CAAvC;AACH,OAJD,CAKA,OAAMM,GAAN,EAAU;AACNF,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;AACJ,KAnBY;;AAAA,SA+BbE,YA/Ba,GA+BEC,CAAD,IAAO;AACjB,WAAKN,QAAL,CAAc;AAACO,QAAAA,WAAW,EAACD,CAAC,CAACE,MAAF,CAASC;AAAtB,OAAd,EAA2C,MAAKP,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAjB,CAAhD;AAEH,KAlCY;;AAET,SAAKA,KAAL,GAAY;AACRT,MAAAA,aAAa,EAAC,EADN;AAERM,MAAAA,WAAW,EAAC;AAFJ,KAAZ;AAIH,GAPqC,CAStC;;;AA6BAI,EAAAA,MAAM,GAAE;AAEJ,UAAM;AAACV,MAAAA,aAAD;AAAgBM,MAAAA;AAAhB,QAAgC,KAAKG,KAA3C;AAEA,UAAME,QAAQ,GAAGX,aAAa,CAACY,MAAd,CAAqBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCV,WAAW,CAACW,iBAAZ,EAAhC,CAA5B,CAAjB;AAEA,wBACI;AAAA,8BACI,QAAC,SAAD;AAAA,+BACI,QAAC,GAAD;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,IAAR;AAAA,mCACI;AAAI,cAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,IAAR;AAAA,mCACI,QAAC,SAAD;AAAW,cAAA,YAAY,EAAE,KAAKb,YAA9B;AAA4C,cAAA,WAAW,EAAE;AAAzD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI,QAAC,SAAD;AAAA,+BACI,QAAC,GAAD;AAAA,oBACKO,QAAQ,CAACO,GAAT,CAAeC,CAAD,iBACf,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,GAAR;AAAY,YAAA,EAAE,EAAC,GAAf;AAAkB,YAAA,SAAS,EAAC,WAA5B;AAAA,mCACI,QAAC,cAAD;AACW,cAAA,KAAK,EAAEA,CAAC,CAACC,EADpB;AACwB,cAAA,CAAC,EAAED;AAD3B,eACKA,CAAC,CAACC,EADP;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADC;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA,oBADJ;AAyBH;;AArEqC;;AAyE1C,eAAe7B,WAAf","sourcesContent":["import React from 'react';\nimport './ListOfCards.style.css';\nimport {CardIndividual} from '../card/CardIndividual.component';\nimport {Container,Col,Row} from 'reactstrap'\nimport {SearchBox} from '../searchBox/searchBox.component'\n\n\nclass ListOfCards extends React.Component {\n    constructor(){\n        super();\n        this.state ={\n            algorithmList:[],\n            searchField:''\n        }\n    }\n\n    // async way \n\n    componentDidMount = async() => {\n        try {\n            const getDataB = await fetch('http://localhost:3000/algorithms')\n            const dataToJ = await getDataB.json()\n            this.setState({algorithmList: dataToJ},console.log(dataToJ))\n        }\n        catch(err){\n            console.log('not possible now');\n        }\n    }\n\n    // promises\n\n    // componentDidMount() => {\n    //     const getDataB = await fetch('')\n    //     .then(response => response.json())\n    //     .then(alg => this.setState({algorithmList:alg}))\n    // .catch((e)=>(console.log('not possible now'))\n    // }\n\n\n    checkAndFind= (e) => {\n        this.setState({searchField:e.target.value},()=> console.log(this.state)\n        )\n    }\n\n\n    render(){\n\n        const {algorithmList, searchField } = this.state; \n\n        const fiterAlg = algorithmList.filter(alg => alg.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n\n        return(\n            <>\n                <Container>\n                    <Row >\n                        <Col xs='12'>\n                            <h1 className='ml-auto mr-auto'>Algorithm List</h1>\n                        </Col>\n                        <Col xs='12'>\n                            <SearchBox handleChange={this.checkAndFind} placeholder={'Search Algorithms'}/>\n                        \n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <Row >\n                        {fiterAlg.map( (x) => \n                        <Col xs='6' sm='4'className='card-list'>\n                            <CardIndividual\n                            key={x.id} index={x.id} x={x} />\n                        </Col>\n                        )}      \n                    </Row>\n                </Container>\n            </>\n        )\n    }\n\n}\n\nexport default ListOfCards\n\n"]},"metadata":{},"sourceType":"module"}