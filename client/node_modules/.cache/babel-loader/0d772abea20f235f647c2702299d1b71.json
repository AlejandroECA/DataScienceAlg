{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { SignInFailure, SignInSuccess } from './users.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  yield;\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/alejandrocarrillo/Documents/Projects/DataScienceDepaul/datascience/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","SignInFailure","SignInSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA6B,cAA7B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAmE,+BAAnE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA4C,iBAA5C;AAGA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAE9C,MAAG;AACH,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BI,QAA3B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACQ,aAAa,CAAC;AACpBM,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG;AAFI,KAAD,CAAd,CAAT;AAKC,GARD,CAQC,OAAMC,KAAN,EAAY;AACb,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACC;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAU,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAtB;AACA,UAAMI,uBAAuB,CAACS,IAAD,CAA7B;AAEH,GAJD,CAIC,OAAMF,KAAN,EAAY;AACT,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,mBAAV,GAA+B;AAClC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,oBAAjB,EAAsCJ,gBAAtC,CAAhB;AACH;AAID,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAT,CAA1B,EAAsD;AACzD,MAAG;AACC,UAAM;AAAEP,MAAAA;AAAF,QAAY,MAAMd,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAAxB;AACA,UAAMhB,uBAAuB,CAACS,IAAD,CAA7B;AAEH,GAJD,CAIC,OAAMF,KAAN,EAAY;AACThB,IAAAA,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAH;AACH;AACJ;AAED,OAAO,UAAUW,kBAAV,GAA8B;AACjC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAqCN,eAArC,CAAhB;AACH;AAED,OAAO,UAAUO,mBAAV,GAA+B;AAClC;AACH;AAED,OAAO,UAAUC,kBAAV,GAA8B;AACjC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,kBAAjB,EAAoCF,mBAApC,CAAhB;AACH;AAED,OAAO,UAAUG,SAAV,GAAqB;AACxB,QAAM/B,GAAG,CAAC,CAACC,IAAI,CAACkB,mBAAD,CAAL,EACVlB,IAAI,CAACyB,kBAAD,CADM,CAAD,CAAT;AAEH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\nimport UserActionTypes  from './user.types'\nimport { auth, googleProvider, createUserProfileDocument , } from  '../../firebase/firebase.utils'\nimport { SignInFailure, SignInSuccess} from './users.actions'\n\n\nexport function* getSnapshotFromUserAuth(userAuth){\n\n    try{\n    const userRef = yield call(createUserProfileDocument,userAuth)\n    const userSnapshot = yield userRef.get()\n    yield put(SignInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot.data\n    }))\n    \n    }catch(error){\n    yield put(SignInFailure(error))\n    }\n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user} =  yield auth.signInWithPopup(googleProvider)\n        yield getSnapshotFromUserAuth(user)\n        \n    }catch(error){\n        yield put(SignInFailure(error))\n    }\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\n}\n\n\n\nexport function* signInWithEmail({payload:{email, password}}){\n    try{\n        const { user } =  yield auth.signInWithEmailAndPassword(email,password);\n        yield getSnapshotFromUserAuth(user)\n\n    }catch(error){\n        put(SignInFailure(error))\n    }\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function* isUserAuthenticated(){\n    yield\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),\n    call(onEmailSignInStart)])\n}"]},"metadata":{},"sourceType":"module"}